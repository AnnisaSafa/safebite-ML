# -*- coding: utf-8 -*-
"""tanpa token-encode.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WJYmOJ9MT3Rx8u4POsC8zBErMNwOAw6j
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from sklearn.preprocessing import LabelEncoder
from keras.preprocessing.text import Tokenizer
from keras.models import load_model
from tensorflow.keras.preprocessing.sequence import pad_sequences
from flask import Flask, request, jsonify

# Loads a previously saved model
model = load_model('model.h5')

# define the predict
def predict (input_texts): 
    # Initialize variables for predictive results
    allergies_output = []
    diseases_output = []
    halal_output = []

    # Make predictions for user_text
    for text in input_texts:
      # Make predictions using models
      y_pred_allergies, y_pred_diseases, y_pred_halal = model.predict([text])

      # Combines the output of multiple texts
      allergies_output.extend(y_pred_allergies)
      diseases_output.extend(y_pred_diseases)
      halal_output.extend(y_pred_halal)


    # Combine prediction results from multiple texts
    combined_allergies_output = ' '.join(allergies_output) if allergies_output else ""
    combined_diseases_output = ' '.join(diseases_output) if diseases_output else ""
    combined_halal_output = ' '.join(halal_output) if halal_output else ""

    # Examine the prediction results to create a response
    if combined_allergies_output and "No Potential Allergies Detected" in allergies_output and len(allergies_output) > 1:
        non_no_allergies_output = [output for output in allergies_output if output != "No Potential Allergies Detected"]
        if non_no_allergies_output:
          final_allergies_output = ", ".join(non_no_allergies_output)
        else:
          final_allergies_output = "No Potential Allergies Detected"
    else:
      final_allergies_output = "Sorry we can't detect it"


    if combined_diseases_output and "No Potential Diseases Detected" in diseases_output and len(diseases_output) > 1:
        non_no_diseases_output = [output for output in diseases_output if output != "No Potential Diseases Detected"]
        if non_no_diseases_output:
          final_diseases_output = ", ".join(non_no_diseases_output)
        else:
          final_diseases_output = "No Potential Diseases Detected"
    else:
      final_diseases_output = "Sorry we can't detect it"


    if final_allergies_output == "Sorry we can't detect it" and final_diseases_output == "Sorry we can't detect it":
      final_halal_output = "Sorry we can't detect it"
    else:
      if combined_halal_output:
        if "Haram" in halal_output:
            final_halal_output = "Haram"
        else:
            final_halal_output = "Halal"
      else:
        final_halal_output = "Sorry we can't detect it"

    return final_allergies_output, final_diseases_output, final_halal_output


app = Flask(__name__)


@app.route('/process_input', methods=['GET','POST'])
def index():
# Check user token authorization
   # auth_token = request.headers.get('Authorization')
    #if auth_token != 'YOUR_AUTH_TOKEN':
     #   return 'Unauthorized', 401

# Takes input from the body of the request in JSON format
    data = request.get_json()
    user_text = data.get('text')

#Process the Input
    # Separates text input by commas
    input_texts = user_text.split(",")

# Get predictions
    final_allergies_output, final_diseases_output, final_halal_output = predict(input_texts)

# Create responses
    response = {
        'status': 'success',
        'result': {
            'Data':  user_text,
            'Allergies Prediction': final_allergies_output,
            'Diseases Prediction': final_diseases_output,
            'Halal/Haram Prediction': final_halal_output
        }
    }

    return jsonify (response)

if __name__ == '__main__':
    app.run()